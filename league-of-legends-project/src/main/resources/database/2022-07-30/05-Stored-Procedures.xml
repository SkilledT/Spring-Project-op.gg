<?xml version="1.1" encoding="UTF-8" standalone="no"?>
<databaseChangeLog xmlns="http://www.liquibase.org/xml/ns/dbchangelog" xmlns:ext="http://www.liquibase.org/xml/ns/dbchangelog-ext" xmlns:pro="http://www.liquibase.org/xml/ns/pro" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog-ext http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-ext.xsd http://www.liquibase.org/xml/ns/pro http://www.liquibase.org/xml/ns/pro/liquibase-pro-latest.xsd http://www.liquibase.org/xml/ns/dbchangelog http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-latest.xsd">

<changeSet id="add_stored_procedures" author="damian_wieczorek">
    <sql>
        <![CDATA[
        CREATE PROCEDURE [dbo].[champion_with_win_ratio] (@championName varchar(100), @minimumMatches int = 3)
        AS
        BEGIN
            DROP TABLE Champion_With_Win_Ratio_Entity

            CREATE TABLE Champion_With_Win_Ratio_Entity
            (
                name varchar(100),
                win_ratio float,
                icon_url varchar(255),
                games int
            )

            INSERT INTO Champion_With_Win_Ratio_Entity (name, win_ratio, icon_url, games)
            SELECT COALESCE(c.name, x.champion) as name,
               COALESCE(x.win_ratio, -1) as win_ratio,
               COALESCE(c.icon_url, '') as icon_url,
               COALESCE(x.games, 0) as games
            FROM Champion c
                     FULL OUTER JOIN championStats(@championName) x ON c.name = x.champion
            WHERE win_ratio > -1
              AND games > @minimumMatches

            SELECT * FROM Champion_With_Win_Ratio_Entity
            END;

        CREATE PROCEDURE [dbo].[COUNT_KILL_PARTICIPATION] (@GAME_ID NVARCHAR(100), @SUMMONER_NICKNAME NVARCHAR(100))
        AS
        BEGIN
            DECLARE @SUMMONER_ID VARCHAR(100)
            SELECT @SUMMONER_ID = summoner_id FROM Summoner WHERE summoner_nickname = @SUMMONER_NICKNAME
            DECLARE @TEAM_ID VARCHAR(100)
            SELECT @TEAM_ID = Team_team_id FROM Match_participant WHERE Summoner_summoner_id = @SUMMONER_ID

            DECLARE @KILLS INT
            DECLARE @ASSISTS INT

            DECLARE @SUMMONER_KILLS INT
            DECLARE @SUMMONER_ASSISTS INT

            DECLARE @KILL_PARTICIPATION FLOAT

            SELECT @KILLS = ISNULL(SUM(kills), 0), @ASSISTS = ISNULL(SUM(assists), 0)
            FROM Match_participant
                     INNER JOIN Match M2 ON Match_participant.Match_match_id = M2.match_id
            WHERE M2.match_id = @GAME_ID
              AND Team_team_id = @TEAM_ID

            SELECT @SUMMONER_KILLS = ISNULL(kills, 0), @SUMMONER_ASSISTS = ISNULL(assists, 0)
            FROM Match_participant
                     INNER JOIN Match M3 ON Match_participant.Match_match_id = M3.match_id
            WHERE M3.match_id = @GAME_ID
              AND Summoner_summoner_id = @SUMMONER_ID

            SET @KILL_PARTICIPATION = CONVERT(FLOAT, @SUMMONER_KILLS + @SUMMONER_ASSISTS) / CONVERT(FLOAT, @KILLS + @ASSISTS)
        END;

        CREATE PROCEDURE [dbo].[fillChampionStats]
        AS
        BEGIN
            -- fill Champion_Stats table
            DECLARE @champName VARCHAR(100)
            DECLARE champion_cursor CURSOR FOR SELECT DISTINCT name FROM Champion
                    OPEN champion_cursor
            FETCH NEXT FROM champion_cursor INTO @champName
                                                               WHILE @@FETCH_STATUS = 0
            BEGIN
            EXEC updateChampionStats @champName = @champName
            FETCH NEXT FROM champion_cursor INTO @champName
            END
            CLOSE champion_cursor
            DEALLOCATE champion_cursor
        END;

        CREATE PROCEDURE [dbo].[get_most_popular_items_for_champion] (@championName NVARCHAR(100))
        AS
        BEGIN
            DECLARE @result_item_table TABLE
            (
                item_id     INT,
                icon_url    NVARCHAR(MAX),
                plain_text  NVARCHAR(MAX),
                total_cost  INT,
                sell        INT,
                base_cost   INT,
                description NVARCHAR(MAX),
                name        NVARCHAR(MAX)
            )

            -- get full items table, not components
            DECLARE @full_items TABLE
            (
                name       NVARCHAR(MAX),
                total_cost INT
            )

            INSERT INTO @full_items
                SELECT name, total_cost
                FROM Item
                WHERE name IN (
                    SELECT DISTINCT I.name
                    FROM Match_participant
                             INNER JOIN participant_items ON Match_participant.Summoner_summoner_id = participant_items.summoner_id
                        AND Match_participant.Match_match_id = participant_items.match_id
                             INNER JOIN Item I ON participant_items.item_id = I.item_id
                             FULL OUTER JOIN Item_cook_book Icb ON I.item_id = Icb.component_id
                    WHERE Icb.component_id IS NULL
                      AND name IS NOT NULL
                )

              --- Most popular items w/o boots
            INSERT INTO @result_item_table
            SELECT item_id, icon_url, plain_text, total_cost, sell, base_cost, description, name
            FROM Item
            WHERE name IN (
                SELECT TOP 5 name
                FROM Match_participant
                         INNER JOIN participant_items ON Match_participant.Summoner_summoner_id = participant_items.summoner_id
                    AND Match_participant.Match_match_id = participant_items.match_id
                         INNER JOIN Item I ON participant_items.item_id = I.item_id
                WHERE Match_participant.champion_name = @championName
                  AND I.total_cost >= 900
                  AND I.name NOT LIKE '%boots%'
                  AND I.name NOT LIKE '%shoes%'
                  AND name IN (
                    SELECT name
                    FROM @full_items
                )
                GROUP BY name
                ORDER BY COUNT(*) DESC
            )

              -- Most popular boots
            INSERT INTO @result_item_table
            SELECT item_id, icon_url, plain_text, total_cost, sell, base_cost, description, name
            FROM Item
            WHERE name IN (
                SELECT TOP 1 name
                FROM Match_participant
                         INNER JOIN participant_items ON Match_participant.Summoner_summoner_id = participant_items.summoner_id
                    AND Match_participant.Match_match_id = participant_items.match_id
                         INNER JOIN Item I ON participant_items.item_id = I.item_id
                WHERE Match_participant.champion_name = @championName
                  AND I.total_cost >= 900
                  AND (I.name LIKE '%boots%' OR I.name LIKE '%shoes%')
                  AND name IN (
                    SELECT name
                    FROM @full_items
                )
                GROUP BY name
                ORDER BY COUNT(*) DESC
            )

            SELECT * FROM @result_item_table
        END;

        CREATE PROCEDURE [dbo].[updateChampionPerks]
        AS
        BEGIN
            DELETE FROM champion_perk
            DECLARE @champName NVARCHAR(MAX), @mostPopularTree INT, @championId INT
            DECLARE championNamesCursor CURSOR FOR SELECT name FROM Champion GROUP BY name
            OPEN championNamesCursor
            FETCH NEXT FROM championNamesCursor INTO @champName
                                                               WHILE @@FETCH_STATUS = 0
            BEGIN
            BEGIN TRANSACTION
            EXEC @mostPopularTree = mostPopularPerTreeForChampion @champName = @champName
            SELECT @championId = champion_id FROM Champion WHERE name = @champName

            DECLARE @mainTreePerkId INT
            DECLARE mainTreeCursor CURSOR FOR SELECT id FROM perkMainTree(@champName, @mostPopularTree)
                OPEN mainTreeCursor
            FETCH NEXT FROM mainTreeCursor INTO @mainTreePerkId
                                                              WHILE @@FETCH_STATUS = 0
        BEGIN
        INSERT INTO champion_perk (champion_id, perk_id, type)
        VALUES (@championId, @mainTreePerkId, 'MAIN')
            FETCH NEXT FROM mainTreeCursor INTO @mainTreePerkId
        END
        CLOSE mainTreeCursor
            DEALLOCATE mainTreeCursor

        DECLARE @subTreePerkId INT
        DECLARE subTreeCursor CURSOR FOR SELECT id FROM perkSubTree(@champName, @mostPopularTree)
            OPEN subTreeCursor
        FETCH NEXT FROM subTreeCursor INTO @subTreePerkId
                                                             WHILE @@FETCH_STATUS = 0
        BEGIN
        INSERT INTO champion_perk (champion_id, perk_id, type)
        VALUES (@championId, @subTreePerkId, 'SUB')
            FETCH NEXT FROM subTreeCursor INTO @subTreePerkId
        END
        CLOSE subTreeCursor
            DEALLOCATE subTreeCursor

        FETCH NEXT FROM championNamesCursor INTO @champName
        COMMIT
        END
        CLOSE championNamesCursor
            DEALLOCATE championNamesCursor
        END;

        CREATE PROCEDURE [dbo].[updateChampionStats]
    @champName VARCHAR(100)
AS
        BEGIN
    DECLARE @match_id VARCHAR(30), @team_id INT
    DECLARE @temptable TABLE
    (
        enemy_champion VARCHAR(50),
        icon_url       VARCHAR(255),
        match_id       VARCHAR(255),
        isWin          BIT
    )

    DECLARE cur CURSOR FOR
        SELECT m.match_id, T.riot_team_id
        FROM Match_participant
                 INNER JOIN Match M ON Match_participant.Match_match_id = M.match_id
                 INNER JOIN team T ON Match_participant.Team_team_id = T.team_id
        WHERE champion_name = @champName
            OPEN cur

        DELETE FROM Champion_Stats WHERE champion_name = @champName
            FETCH NEXT FROM cur INTO @match_id, @team_id
            WHILE @@FETCH_STATUS = 0
        BEGIN
        INSERT INTO @temptable
        SELECT champion_name, icon_url, match_id, Match_participant.win
        FROM Match_participant
                 INNER JOIN Champion C ON Match_participant.champion_id = C.champion_id
                 INNER JOIN Match M2 ON Match_participant.Match_match_id = M2.match_id
                 INNER JOIN team T2 ON Match_participant.Team_team_id = T2.team_id
        WHERE M2.match_id = @match_id
          AND T2.riot_team_id <> @team_id
            PRINT (@match_id)
        PRINT (@team_id)
        FETCH NEXT FROM cur INTO @match_id, @team_id
        END
        CLOSE cur
            DEALLOCATE cur

        SELECT *
        FROM @temptable

        DECLARE @Table1 TABLE
    (
        enemy_champion VARCHAR(50),
        victories      DOUBLE PRECISION
    )
    INSERT INTO @Table1
        SELECT enemy_champion, COUNT(*) 'victories'
        FROM @temptable
        WHERE isWin = 1
        GROUP BY enemy_champion

        SELECT *
        FROM @Table1

        DECLARE @Table2 TABLE
    (
        enemy_champion VARCHAR(50),
        defeats        DOUBLE PRECISION
    )
    INSERT INTO @Table2
        SELECT enemy_champion, COUNT(*) 'defeats'
        FROM @temptable
        WHERE isWin = 0
        GROUP BY enemy_champion

        SELECT *
        FROM @Table2

        DECLARE @ResultTable TABLE
    (
        enemy_champion VARCHAR(50),
        victories      DOUBLE PRECISION,
        defeats        DOUBLE PRECISION
    )
    INSERT INTO @ResultTable
        SELECT ISNULL(T1.enemy_champion, T2.enemy_champion) AS enemy_champion,
               ISNULL(T1.victories, 0)                      AS Value1,
               ISNULL(T2.defeats, 0)                        AS Value2
        FROM @Table1 T1
                 FULL OUTER JOIN @Table2 T2 ON T2.enemy_champion = T1.enemy_champion

        SELECT *
        FROM @ResultTable

        INSERT INTO Champion_Stats (enemy_champion, win_ratio, games, champion_name)
        SELECT enemy_champion, (victories / (victories + defeats)) 'win_ratio', (victories + defeats) 'games', @champName
        FROM @ResultTable
        END;

        CREATE PROCEDURE [dbo].[updateMatchParticipantAveragePerformanceAggregates]
AS
        BEGIN
        DELETE FROM match_participant_average_performance

            INSERT INTO match_participant_average_performance (
            avg_total_minions_killed,
            avg_dealt_damage_to_champions,
            avg_pentakill,
            avg_received_damage,
            avg_stolen_obj,
            avg_kill_participation,
            stdev_of_kill_participation,
            avg_vision_score,
            stdev_of_vision_score,
            individual_position,
            stdev_of_total_minions_killed,
            stdev_of_dealt_damage_to_champions,
            stdev_of_pentakills,
            stdev_of_received_damage,
            stdev_of_stolen_obj,
            tier
        )
        SELECT
            AVG(ISNULL(total_minions_killed, 0)),
            AVG(ISNULL(magic_damage_dealt_to_champions, 0)),
            AVG(ISNULL(pentakills, 0)),
            AVG(ISNULL(total_damage_taken, 0)),
            AVG(ISNULL(objectives_stolen, 0)),
            AVG(ISNULL(kill_participation, 0)),
            STDEV(ISNULL(kill_participation, 0)),
            AVG(ISNULL(vision_score, 0)),
            STDEV(ISNULL(vision_score, 0)),
            individual_position,
            STDEV(ISNULL(total_minions_killed, 0)),
            STDEV(ISNULL(total_damage_dealt_to_champions, 0)),
            STDEV(ISNULL(pentakills, 0)),
            STDEV(ISNULL(total_damage_taken, 0)),
            STDEV(ISNULL(objectives_stolen, 0)),
            tier
        FROM
            Match_participant
                INNER JOIN
            Summoner S ON Match_participant.Summoner_summoner_id = S.summoner_id
        WHERE
            Tier IS NOT NULL
        GROUP BY
            individual_position,
            tier
        END;

        ]]>
    </sql>
</changeSet>

</databaseChangeLog>